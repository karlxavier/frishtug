import VueFormWizard from 'vue-form-wizard'
import VueTabs from 'vue-nav-tabs'
import Vue from 'vue/dist/vue.esm'
import swal from 'sweetalert2'
import {pulse_loader} from './lib/loaders'
import {get} from './lib/ajax_lib'
// Components
Vue.use(VueFormWizard)
Vue.use(VueTabs)

// Days
const mondayToFriday = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
const sundayToThursday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday"]


const registrationForm = new Vue({
  el: '#registration-form',
  data: {
    payment_method: 'credit_card',
    different_billing: false,
    delivery_date: '',
    schedule: 'monday_to_friday',
    stripe_key: '<%= STRIPE_PUBLIC_KEY %>',
    billing_address: [{
      address_line1: '',
      address_line2: '',
      address_city: '',
      address_state: '',
      address_zip: '',
      address_country: 'US',
      address_location_at: 'at_work'
    }],
    credit_card_billing_address: {
      address_line1: '',
      address_line2: '',
      address_city: '',
      address_state: '',
      address_country: 'US',
      address_zip: ''
    },
    credit_card: {
      number: null,
      cvc: null,
      exp_month: '',
      exp_year: ''
    },
    bank_account: {
      country: 'US',
      currency: 'usd',
      routing_number: null,
      account_number: null,
      account_holder_name: null,
      account_holder_type: 'individual'
    },
    error_messages: '',
    tab_titles: mondayToFriday,
    allowed_zip_codes: JSON.parse(localStorage.getItem('allowed_zip_codes')),
    interval: '',
    delivery_dates: [],
    date_names: mondayToFriday,
    calendar: '',
    current_date: new Date(localStorage.getItem('current_date_est'))
  },
  methods: {
    changeCalendar: (date) => {
      const _this = registrationForm
      get({
        url: `/user_registrations/days.json?date=${date}`
      }).then((response) => {
        const parsed = JSON.parse(response)
        _this.calendar = parsed
        setTimeout(function() {
          registrationForm.populateCalendar()
        }, 500)
      })
    },
    populateCalendar: () => {
      const _this = registrationForm
      if (_this.interval !== 'single_order') {
        const dates = registrationForm.delivery_dates
        registrationForm.unpopulateCalendar()
        dates.forEach( (date, index) => {
          const el = document.querySelector(`.date-${date}`)
          if (el) {
            el.classList.add('active')
            order[`day_${index + 1}`].date = date
          }
        })
      } else {
        const el = document.querySelector(`.date-${_this.delivery_date}`)
        _this.unpopulateCalendar()
        if (el) {
          el.classList.add('active')
        }
      }
    },
    unpopulateCalendar: () => {
      const calendar = document.querySelector('.calendar')
      const aTags = calendar.querySelectorAll('a')
      aTags.forEach(aTag => {
        aTag.classList.remove('active')
      })
    },
    selectDay: (date) => {
      const _this = registrationForm
      if (_this.interval !== 'single_order') {
        getSchedule(date, _this)
      } else {
        _this.delivery_date = date
        _this.populateCalendar()
        order.single_order.date = date
      }
    },
    setInterVal: function(interval) {
      this.interval = interval
      if (interval === 'month') {
        order.order_type = 'multiple'
        order.single_order.meal_ids = []
        order.single_order.meals = []
      } else {
        order.order_type = 'single'
        const day = [1,2,3,4,5]
        day.forEach( d => {
          const o = order[`day_${d}`]
          o.meal_ids = []
          o.meals = []
        })
      }
      renderOrders()
      this.populateCalendar()
      this.nextTab()
    },
    addBillingAddress: function() {
      const _this = registrationForm
      _this.billing_address.push({
        line1: null,
        line2: null,
        city: null,
        state: null,
        zip_code: null,
        location_at: 'multiple_workplaces'
      })
    },
    formatCardNumber: () => {
      const _this = registrationForm
      _this.credit_card.number = _this.credit_card.number.replace(/[^\d]/g, '')
      _this.credit_card.number = _this.credit_card.number.substring(0, 16)

      const numberSections = _this.credit_card.number.match(/\d{1,4}/g)
      if (numberSections !== null) {
        _this.credit_card.number = numberSections.join(' ')
      }
    },
    onComplete: function() {
      alert('Yay. Done!')
    },
    nextTab: function() {
      const btn = document.querySelector('.wizard-btn')
      const click = new Event('click')
      btn.dispatchEvent(click)
    },
    changeSchedule: function() {
      const _this = this
      setTabsSchedule(_this.schedule)
      if (_this.schedule === 'sunday_to_thursday') {
        _this.tab_titles = sundayToThursday
      } else {
        _this.tab_titles = mondayToFriday
      }

      setTimeout(() => {
        _this.delivery_date = document.querySelector('#start_date_0').value
      }, 300)
    },
    isActiveSchedule: function(sched) {
      if (this.schedule === sched) { return ' btn-brown' }
      return ''
    },
    isActiveDeliveryDate: function(date) {
      if (this.delivery_date === date) { return ' btn-brown' }
      return ''
    },
    formatDate: function(date) {
      const d = new Date(date)
      const days = [
        "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"
      ];
      const monthNames = [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
      ];

      return `${days[d.getDay()]}, ${monthNames[d.getMonth()]} ${ d.getDate() }`
    },
    accountValidations: function() {
      const inputs = [
        "[name='registration_form[first_name]']",
        "[name='registration_form[last_name]']",
        "[name='registration_form[email]']",
        "[name='registration_form[password]']"
      ]

      return multiplePresenceValidator(inputs)
    },
    addressValidations: function() {
      const inputs = [
        "[name='registration_form[line1]']",
        "[name='registration_form[city]']",
        "[name='registration_form[state]']",
        "[name='registration_form[zip_code]']"
      ]

      return multiplePresenceValidator(inputs)
    },
    paymentValidations: function() {
      const inputs = [
        "[name='registration_form[card_number]']",
        "select[name='registration_form[month]']",
        "select[name='registration_form[year]']",
        "[name='registration_form[cvc]']",
        "[name='registration_form[billing_line_1]']",
        "[name='registration_form[billing_city]']",
        "[name='registration_form[billing_state]']",
        "[name='registration_form[billing_zip_code]']",
        "[name='registration_form[bank_name]']",
        "[name='registration_form[account_number]']",
        "[name='registration_form[routing_number]']"
      ]
      registrationForm.enableMealSelector()
      return multiplePresenceValidator(inputs)
    },
    showCongrats: function() {
      const _this = this
      swal({
        title: 'Congratulations!',
        text: "You have made your first meal plan.",
        type: 'success',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'REVIEW ORDER'
      }).then( function() {
        _this.nextTab()
        return true
      })
    },
    createToken: function() {
      const _this = this
      const form = document.querySelector('form#sign_up_form')
      let address
      Stripe.setPublishableKey(_this.stripe_key)
      form.classList.add('disabled')

      if (_this.payment_method === 'credit_card') {
        if (hasAddress(_this.credit_card_billing_address)) {
          address = _this.credit_card_billing_address
          console.log('pasok')
        } else {
          address = _this.billing_address[0]
        }

        Stripe.card.createToken({
          number: _this.credit_card.number.replace(/\s+/g, ''),
          exp_month: _this.credit_card.exp_month,
          exp_year: _this.credit_card.exp_year,
          cvc: _this.credit_card.cvc,
          address_line1: address.address_line1,
          address_line2: address.address_line2,
          address_city: address.address_city,
          address_state: address.address_state,
          address_country: address.address_country,
          address_zip: address.address_zip,
        }, stripeResponseHandler)
      } else {
        Stripe.bankAccount.createToken(
          _this.bank_account
        , stripeResponseHandler)
      }
    },
    validateZip: function(event, key, index) {
      let showOrHide
      registrationForm[key][index].address_zip = event.target.value
      if (isValidUSZip(registrationForm[key][index].address_zip)) {
        event.target.classList.remove('is-invalid')
      } else {
        event.target.classList.add('is-invalid')
      }
    },
    onlyNumber: function(event) {
      if (event.target.tagName === 'INPUT' && event.target.type === 'text') {
        event.target.value = event.target.value.replace(/[^\d]/g, '')
      }
    },
    limitInput: function(event, limit) {
      if (event.target.tagName === 'INPUT' && event.target.type === 'text') {
        event.target.value = event.target.value.substring(0, limit)
      }
    },
    enableMealSelector: function() {
      mealSelectorInit()
      mealCounterObserver()
      return true
    },
    showDate: (date) => {
      const newDate = new Date(date)
      return newDate.getDate()
    },
    isNotSaturday: (date) => {
      const newDate = new Date(date)
      return newDate.getDay() < 6
    },
    isDisabledDate: (date) => {
      const theDate = new Date(date)
      const currentDate = new Date(registrationForm.current_date)
      const isYesterdaysDate = theDate.getTime() < currentDate.getTime()
      if (isYesterdaysDate) {
        return true
      }
      
      const isSameDate = theDate.getTime() === currentDate.getTime()
      if (isSameDate) {
        return true
      }

      const addOne = (date) => {
        date.setDate(date.getDate() + 1) 
        return date.getTime()
      }
      const isDatePlusOne = theDate.getTime() === addOne(currentDate)
      if (isDatePlusOne) {
        return get({
          url: '/user_registrations/is_past_noon'
        }).then( (response) => {
          const parsed = JSON.parse(response)
          if (parsed.is_past) {
            return true
          } else {
            return false
          }
        })
      }

      return !registrationForm.isNotSaturday(date)
    }
  }
})


const getSchedule = (date, vueModel) => {
  const _this = vueModel
  get({
    url: '/user_registrations/selected_date?date=' + date
  }).then((response) => {
    const res = JSON.parse(response)
    const errorEl = document.querySelector('.calendar-errors')
    if (res.status === 'success') {
      errorEl.innerHTML = ''
      _this.delivery_dates = res.dates
      _this.date_names = res.names
      _this.populateCalendar()
    } else {
      errorEl.innerHTML = ''
      const div = document.createElement('div')
      div.className = 'alert alert-danger'
      div.innerHTML = `<strong>${res.message}</strong>`
      errorEl.appendChild(div)
      _this.unpopulateCalendar()
    }
  })
}

const getCalendar = () => {
  const _this = registrationForm
  get({
    url: `/user_registrations/days.json`
  }).then((response) => {
    const parsed = JSON.parse(response)
    _this.calendar = parsed
  })
}
getCalendar()


const hasAddress = (address) => {
  const to_validate = ['address_line1', 'address_city', 'address_state', 'address_zip']
  let is_valid = true
  to_validate.forEach(key => {
    is_valid = address[key] !== ''
    if (!is_valid) { return }
  })
  return is_valid
}

const stripeResponseHandler = (status, response) => {
  const form = document.querySelector('form#sign_up_form')

  if (response.error) {
    const paymentError = form.querySelector('payment_errors')
    form.classList.remove('disabled')
    registrationForm.error_messages = response.error.message
  } else {
    const token = response.id
    const brand = response.card.brand
    completeAction(token, brand)
  }
}

const multiplePresenceValidator = (inputsNameClassOrIds) => {
  let invalid = 0
  inputsNameClassOrIds.forEach( inputsNameClassOrId => {
    const input = document.querySelector(`${inputsNameClassOrId}`)
    if (!input) { return }

    if (!valueValidator(input)) {
      invalid++
    }
  })

  if (invalid > 0) {
    return false
  } else {
    return true
  }
}


const valueValidator = (input) => {
  if (input.value.trim().length === 0) {
    input.classList.add('is-invalid')
    return false
  } else {
    input.classList.remove('is-invalid')
    return true
  }
}

const isValidUSZip = (zipCode) => {
   return /^\d{5}$/.test(zipCode);
}

window.hasAddress = hasAddress
window.form_data = registrationForm